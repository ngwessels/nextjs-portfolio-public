import formidable from 'formidable';
import fs from 'fs';
import path from 'path';
import { PDFDocument } from 'pdf-lib';
import mammoth from 'mammoth';

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // Parse the form data to get tracking info
    const form = formidable({
      uploadDir: '/tmp',
      keepExtensions: true,
      maxFileSize: 10 * 1024 * 1024, // 10MB limit
    });

    const [fields] = await form.parse(req);
    const trackingUrl = fields.trackingUrl?.[0];
    const originalUrl = fields.originalUrl?.[0];

    if (!trackingUrl || !originalUrl) {
      return res.status(400).json({ error: 'Missing tracking URL or original URL' });
    }

    // Use the pre-uploaded resume file from public directory
    const resumePath = path.join(process.cwd(), 'public', 'resume.docx');

    // Check if the file exists
    if (!fs.existsSync(resumePath)) {
      return res.status(404).json({ error: 'Resume file not found. Please ensure resume.docx is uploaded to public/resume.docx' });
    }

    // Read the .docx file
    const docxBuffer = fs.readFileSync(resumePath);

    // Extract text from .docx to find and replace URLs
    console.log('Extracting text from .docx file...');
    const result = await mammoth.extractRawText({ buffer: docxBuffer });
    let text = result.value;

    console.log('Original text length:', text.length);
    console.log('Looking for URL:', originalUrl);

    // Replace the original URL with the tracking URL
    const originalUrlPattern = new RegExp(originalUrl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
    const replacementCount = (text.match(originalUrlPattern) || []).length;
    text = text.replace(originalUrlPattern, trackingUrl);

    console.log(`Replaced ${replacementCount} instances of the original URL`);

    // Create a proper PDF with the processed content
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage();
    const { width, height } = page.getSize();

    // Add title
    page.drawText('Resume with Tracking URL', {
      x: 50,
      y: height - 50,
      size: 20,
    });

    // Add URL replacement info
    page.drawText(`URL Replacement Summary:`, {
      x: 50,
      y: height - 80,
      size: 12,
    });

    page.drawText(`• Original URL: ${originalUrl}`, {
      x: 50,
      y: height - 100,
      size: 10,
    });

    page.drawText(`• Tracking URL: ${trackingUrl}`, {
      x: 50,
      y: height - 115,
      size: 10,
    });

    page.drawText(`• Replacements made: ${replacementCount}`, {
      x: 50,
      y: height - 130,
      size: 10,
    });

    // Add processed resume content
    page.drawText('Processed Resume Content:', {
      x: 50,
      y: height - 160,
      size: 14,
    });

    // Split text into lines and add to PDF
    const lines = text.split('\n').slice(0, 25); // Show first 25 lines
    let yPosition = height - 180;

    lines.forEach((line, index) => {
      if (line.trim() && yPosition > 50) {
        // Truncate long lines to fit on page
        const truncatedLine = line.length > 80 ? line.substring(0, 77) + '...' : line;
        page.drawText(truncatedLine, {
          x: 50,
          y: yPosition,
          size: 9,
        });
        yPosition -= 12;
      }
    });

    // Add footer
    if (yPosition > 30) {
      page.drawText('Generated by Portfolio Tracker', {
        x: 50,
        y: 30,
        size: 8,
      });
    }

    const pdfBytes = await pdfDoc.save();
    console.log('PDF generated successfully, size:', pdfBytes.length, 'bytes');

    // Return the PDF
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=processed_resume.pdf');
    res.send(Buffer.from(pdfBytes));

  } catch (error) {
    console.error('Resume processing error:', error);
    res.status(500).json({ error: 'Failed to process resume' });
  }
};
